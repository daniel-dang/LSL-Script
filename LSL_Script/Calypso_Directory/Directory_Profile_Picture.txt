/*
Objective:
    - The purpose of this script is to display the picture of a person on a prim by using OSSL function :osSetDynamicTextureURL
    The function will have listen event that listen to the URL came from the List_Operation object. The script will then use
    that url to put into the OSSL function above to display the picture. 
    - HINT**: Picture or other image from a database cannot be display by simply copy and paste the picture URL. See List_Directory
    for understanding HTTPRequest and authentication into the websites or databases. 
    
Script Author: Daniel Dang
*/
//Listen channel
integer List_Operation = 23568;                            //Channel to listen to list_operation object

//Listen Control
integer ListOperation_Listen;                              //Listen control for ListOperation object

/*
This function will use the parameter URL to set picture on a face of a prim using 
OSSL function: osSetDynamicTextureURL
*/
Draw_Picture(string URL)
{
    string  dynamicID="";           //String Dynamic ID
    integer refreshRate = 0;        //Rate of image will be reset
    string  contentType="image";    //Content of the media being display, in this case it image

    osSetDynamicTextureURL(dynamicID, contentType ,URL  , "", refreshRate );        //Set texture
}

//Main State
default
{
    state_entry()
    {
        ListOperation_Listen = llListen(List_Operation, "", NULL_KEY, "");      //Activate listen
    }
    /*
        Listen event will catch any message generated by LSL llSay function in all channel. 
    */
    listen (integer channel, string name, key id, string msg)
    {
        llListenRemove(ListOperation_Listen);                                   //Deactivate listen
        
        //If the channel detected = to List_Operaiton channel (defined above)
        if (channel == List_Operation)
        {
            //llSay(0, "URL = " + msg);
            Draw_Picture(msg);
        }
        
        llResetScript();        //Reset the script
    }
}